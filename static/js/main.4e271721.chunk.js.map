{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","darkStyle","color","mode","backgroundColor","document","title","className","style","id","type","Navbar","to","onClick","toggleMode","HtmlFor","Textform","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","updatedText","toUpperCase","showAlert","toLowerCase","split","map","join","arr","i","charAt","slice","newText","getElementById","select","navigator","clipboard","writeText","filter","element","Alert","height","alert","role","word","lower","capitalize","msg","defaultProps","about","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4e271721.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n  //  const [darkStyle, setdarkStyle] = useState({\r\n  //   color: 'black',\r\n  //   backgroundColor: 'white'\r\n  //  })\r\n  let darkStyle = {\r\n    color: props.mode ==='dark'?'white':'#212529',\r\n    backgroundColor: props.mode ==='dark'?'#212529':'white', \r\n}\r\n    //const [btnText, setbtnText] = useState(\"Enable Dark Mode\")\r\n   document.title = 'TextUtils - About';\r\n  //  const toggleStyle = ()=>{\r\n  //    if(darkStyle.color === 'black'){\r\n  //     setdarkStyle({\r\n  //       color: 'white',\r\n  //       backgroundColor: 'black',\r\n  //       border: '1px solid white'\r\n  //     })\r\n  //     setbtnText(\"Enable Light Mode\");\r\n  //    }\r\n  //    else{\r\n  //     setdarkStyle({\r\n  //       color: 'black',\r\n  //       backgroundColor: 'white'\r\n  //     })\r\n  //     setbtnText(\"Enable Dark Mode\");\r\n  //    }\r\n  //  }\r\n    return (\r\n        <div className = \"container\" style = {{color: props.mode ==='dark'?'white':'#212529'}}>\r\n      <h1 className = \"my-3\">About TextUtils</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n          <button className=\"accordion-button\" type=\"button\" style = {darkStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n            <b>Text Analysis</b>\r\n          </button>\r\n        </h2>\r\n        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n          <div className=\"accordion-body\" style = {darkStyle}>\r\n          TextUtils is a tool that allows you to analyse a text quickly and effeciently by counting the number of words and characters present. It also helps in manupulating the text by providing various useful utilities\r\n          like different kind of conversions, copying and clearing text, etc. \r\n          Be it word count, character count, or manupulating the text, you can do it all at one place. \r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n          <button className=\"accordion-button collapsed\" type=\"button\" style = {darkStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n            <b>Free to Use</b>\r\n          </button>\r\n        </h2>\r\n        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n          <div className=\"accordion-body\" style = {darkStyle}>\r\n            TextUtils is an easy and free to use analyzer tool that provides instant character and word count statistics for a given text.\r\n             TextUtils reports the number of words and characters. Thus it is suitable for wrtigng text with word/character limit. \r\n             This tool is intended for everyone who wants quick and efficient analysis of there important peices of text.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n          <button className=\"accordion-button collapsed\" type=\"button\" style = {darkStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n           <b> Browser Compatible </b>\r\n          </button>\r\n        </h2>\r\n        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n          <div className=\"accordion-body\" style = {darkStyle}>\r\n            This word counter works in any web browser be it chrome, firefox, Internet explorer, safari, opera. It suits to count characters in facebook, blogs, books, documents(pdf, excel), articles etc. \r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n     {/* <div className = \"container my-3\">\r\n       <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btnText}</button>\r\n    </div> */}\r\n    </div> \r\n    )\r\n}\r\n\r\n\r\n//component's name should start with a capital letter,","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  \r\n    return (\r\n        <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        {/* //  <nav className= \"navbar navbar-expand-lg navbar-dark bg-dark\"> */}\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>  \r\n              </li>        \r\n            </ul>\r\n          \r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" HtmlFor=\"flexSwitchCheckDefault\">DarkMode</label>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    about : PropTypes.string.isRequired\r\n\r\n}\r\nNavbar.defaultProps = {\r\n    title : 'set title here',\r\n    about : 'set about here'\r\n}\r\n\r\n\r\n","import React, {useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n \r\n    document.title = 'TextUtils - Home';\r\n     const handleUpperCase = ()=> {\r\n        //  console.log(\"uppercase was clicked\" + text);\r\n         let updatedText = text.toUpperCase();\r\n         setText(updatedText);\r\n         props.showAlert(\"Converted to Uppercase !\", \"success\");\r\n     }\r\n\r\n     const handleLowerCase = ()=> {\r\n         let updatedText = text.toLowerCase();\r\n         setText(updatedText);\r\n         props.showAlert(\"Converted to Lowercase !\", \"success\");\r\n     }\r\n\r\n     const handleInvertCase = ()=> {\r\n        \r\n        var updatedText = text.split('')\r\n        .map((text) =>\r\n         text === text.toUpperCase() \r\n         ? text.toLowerCase()\r\n         : text.toUpperCase()\r\n        ).join('')\r\n     setText(updatedText);\r\n     props.showAlert(\"Converted to Invertcase !\", \"success\");\r\n    }\r\n    \r\n     const handleCapitalize = ()=> {\r\n         const arr = text.split(\" \");\r\n         for(let i=0; i<arr.length; i++){\r\n           arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n         }\r\n\r\n         const updatedText = arr.join(\" \");\r\n         setText(updatedText);\r\n         props.showAlert(\"Text has been capitalized.\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n     const handleCopy = ()=> {\r\n         var text = document.getElementById(\"textBox\");\r\n         text.select();\r\n         navigator.clipboard.writeText(text.value);\r\n         props.showAlert(\"Copied to clipboard.\", \"success\");\r\n     }\r\n\r\n     const handleClear = ()=> {\r\n        let updatedText = \"\";\r\n         setText(updatedText);\r\n         props.showAlert(\"Text Cleared.\", \"success\");\r\n     }\r\n     const handleOnchange = (event)=> {\r\n        // console.log(\"onchange\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const[text, setText] = useState('');\r\n   // text = \"newText\";    wrong way to change text (we cant simply use assignment operator)\r\n    //setText(\"newText\");  right way to change text.\r\n    return (\r\n        <>\r\n        <div className = \"container\" style ={{color: props.mode==='dark'?'white':'black'}} >\r\n            <h1 className =\"mb-3\">{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n         \r\n            <textarea className=\"form-control\" value ={text} onChange = {handleOnchange} style = {{backgroundColor: props.mode==='dark'?'#212529':'white', color: props.mode==='dark'?'white':'black'}} id=\"textBox\" rows=\"10\"></textarea>\r\n             </div>\r\n             \r\n             <button disabled = {text.length === 0} className = \"btn btn-dark mx-2 my-2\" onClick= {handleUpperCase}>Convert to Uppercase</button>\r\n             <button disabled = {text.length === 0} className = \"btn btn-dark mx-2  my-2\" onClick= {handleLowerCase}>Convert to Lowercase</button>\r\n             <button disabled = {text.length === 0} className = \"btn btn-dark mx-2  my-2\"  onClick= {handleInvertCase}>Convert to Invertcase</button>\r\n             <button disabled = {text.length === 0} className = \"btn btn-dark mx-2  my-2\" onClick= {handleCapitalize}>Capitalize the word</button>\r\n             <button disabled = {text.length === 0} className = \"btn btn-dark mx-2  my-2\"  onClick= {handleExtraSpaces}>Remove Extra Spaces</button>\r\n             <button disabled = {text.length === 0} className = \"btn btn-dark mx-2  my-2\" onClick= {handleCopy}>Copy To Clipboard</button>\r\n             <button disabled = {text.length === 0} className = \"btn btn-dark mx-2  my-2\"  onClick= {handleClear}>Clear All Text</button>\r\n             \r\n     </div>\r\n\r\n        <div className = \"container my-3\" style ={{color: props.mode==='dark'?'white':'black'}} >\r\n            <h2>Text Summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length !== 0}).length} words and {text.length} letters.</p>\r\n            <p>{0.008 * text.split(\" \").filter((element)=>{return element.length !== 0}).length} Minutes Read.</p>\r\n            <h2>Text Preview</h2>\r\n            <p>{text.length>0?text:\"Enter your text to preview it.\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=> {\r\n      const lower = word.toLowerCase();\r\n      return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style = {{height: '38px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n       \r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n//export default Alert","//import logo from './logo.svg';\nimport './App.css';\nimport About from './components/About'; \nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n const showAlert = (message, type)=> {\n   setAlert({\n     msg: message,\n     type: type\n   })\n   setTimeout(() => {\n     setAlert(null);\n   }, 1500);\n }\n\n  const toggleMode = ()=> {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#343434';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n        <Router>\n        <Navbar title = \"TextUtils\" mode={mode} toggleMode = {toggleMode} />\n        <Alert alert = {alert}/>\n        <div className=\"container my-3\">    \n \n            <Switch>\n              <Route exact path=\"/about\">\n                <About mode = {mode} />\n               \n              </Route>\n              \n              <Route exact path=\"/\">\n              <Textform heading = \"Enter your text to analyze in the box below\" showAlert = {showAlert} mode={mode}/>\n              \n              </Route>\n            </Switch>\n\n         </div>\n        </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}